// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// coxprocess_loglikelihood
NumericVector coxprocess_loglikelihood(const NumericMatrix& x, const IntegerVector& counts, double area);
RcppExport SEXP _temperingsmc_coxprocess_loglikelihood(SEXP xSEXP, SEXP countsSEXP, SEXP areaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< double >::type area(areaSEXP);
    rcpp_result_gen = Rcpp::wrap(coxprocess_loglikelihood(x, counts, area));
    return rcpp_result_gen;
END_RCPP
}
// eigenMapMatMult
SEXP eigenMapMatMult(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _temperingsmc_eigenMapMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMapMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_
NumericVector dmvnorm_(const NumericMatrix& x, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP _temperingsmc_dmvnorm_(SEXP xSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_(x, mean, covariance));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_cholesky_inverse
NumericVector dmvnorm_cholesky_inverse(const NumericMatrix& x, const NumericVector& mean, const Eigen::MatrixXd& cholesky_inverse);
RcppExport SEXP _temperingsmc_dmvnorm_cholesky_inverse(SEXP xSEXP, SEXP meanSEXP, SEXP cholesky_inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky_inverse(cholesky_inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_cholesky_inverse(x, mean, cholesky_inverse));
    return rcpp_result_gen;
END_RCPP
}
// grad_dmvnorm_precision
NumericMatrix grad_dmvnorm_precision(const NumericMatrix& x, const NumericVector& mean, const NumericMatrix& precision);
RcppExport SEXP _temperingsmc_grad_dmvnorm_precision(SEXP xSEXP, SEXP meanSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_dmvnorm_precision(x, mean, precision));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_
NumericMatrix rmvnorm_(int nsamples, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP _temperingsmc_rmvnorm_(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_(nsamples, mean, covariance));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_cholesky_
NumericMatrix rmvnorm_cholesky_(int nsamples, const NumericVector& mean, const Eigen::MatrixXd& cholesky);
RcppExport SEXP _temperingsmc_rmvnorm_cholesky_(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP choleskySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky(choleskySEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_cholesky_(nsamples, mean, cholesky));
    return rcpp_result_gen;
END_RCPP
}
// dmvstudent_t_cholesky_inverse
NumericVector dmvstudent_t_cholesky_inverse(const NumericMatrix& x, const double& degree, const NumericVector& mean, const Eigen::MatrixXd& cholesky_inverse, const double& constant, const double& factor);
RcppExport SEXP _temperingsmc_dmvstudent_t_cholesky_inverse(SEXP xSEXP, SEXP degreeSEXP, SEXP meanSEXP, SEXP cholesky_inverseSEXP, SEXP constantSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky_inverse(cholesky_inverseSEXP);
    Rcpp::traits::input_parameter< const double& >::type constant(constantSEXP);
    Rcpp::traits::input_parameter< const double& >::type factor(factorSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvstudent_t_cholesky_inverse(x, degree, mean, cholesky_inverse, constant, factor));
    return rcpp_result_gen;
END_RCPP
}
// grad_dmvstudent_t
NumericMatrix grad_dmvstudent_t(const NumericMatrix& x, const double& degree, const NumericVector& mean, const NumericMatrix& precision, const double& factor);
RcppExport SEXP _temperingsmc_grad_dmvstudent_t(SEXP xSEXP, SEXP degreeSEXP, SEXP meanSEXP, SEXP precisionSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const double& >::type factor(factorSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_dmvstudent_t(x, degree, mean, precision, factor));
    return rcpp_result_gen;
END_RCPP
}
// systematic_resampling
IntegerVector systematic_resampling(const NumericVector& weights, int ndraws, double u);
RcppExport SEXP _temperingsmc_systematic_resampling(SEXP weightsSEXP, SEXP ndrawsSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type ndraws(ndrawsSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(systematic_resampling(weights, ndraws, u));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_temperingsmc_coxprocess_loglikelihood", (DL_FUNC) &_temperingsmc_coxprocess_loglikelihood, 3},
    {"_temperingsmc_eigenMapMatMult", (DL_FUNC) &_temperingsmc_eigenMapMatMult, 2},
    {"_temperingsmc_dmvnorm_", (DL_FUNC) &_temperingsmc_dmvnorm_, 3},
    {"_temperingsmc_dmvnorm_cholesky_inverse", (DL_FUNC) &_temperingsmc_dmvnorm_cholesky_inverse, 3},
    {"_temperingsmc_grad_dmvnorm_precision", (DL_FUNC) &_temperingsmc_grad_dmvnorm_precision, 3},
    {"_temperingsmc_rmvnorm_", (DL_FUNC) &_temperingsmc_rmvnorm_, 3},
    {"_temperingsmc_rmvnorm_cholesky_", (DL_FUNC) &_temperingsmc_rmvnorm_cholesky_, 3},
    {"_temperingsmc_dmvstudent_t_cholesky_inverse", (DL_FUNC) &_temperingsmc_dmvstudent_t_cholesky_inverse, 6},
    {"_temperingsmc_grad_dmvstudent_t", (DL_FUNC) &_temperingsmc_grad_dmvstudent_t, 5},
    {"_temperingsmc_systematic_resampling", (DL_FUNC) &_temperingsmc_systematic_resampling, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_temperingsmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
